long long merge(long long arr[],long long left , long long mid , long long right){
        long long temp[right+1];
        
        long long count = 0;
        long long i,j,k;
        
        i=left;
        j=mid;
        k=left;
        while(i<=mid-1 && j<=right) {
            if(arr[i]<=arr[j]) temp[k++] = arr[i++];
            
            else{
                temp[k++] = arr[j++];
                count += (mid-i);
            }
        }
        
        while(i<=mid-1) temp[k++] = arr[i++];
        while(j<=right) temp[k++] = arr[j++];
        
        for(long long i=left ; i<=right ; i++){
            arr[i] = temp[i];
        }
        
        return count;
    }
    long long mergesort(long long arr[],long long left , long long right){
        long long mid , count =0;
        if(right>left){
            mid = (right+left)/2;
            
            count += mergesort(arr,left,mid);
            count += mergesort(arr,mid+1,right);
            
            count += merge(arr,left,mid+1,right);
        }
        return count;
    }
    long long inversionCount(long long arr[],long long N){
        return mergesort(arr,0,N-1);
    }

    // Time Complexity = O(N*logN)
    // Space Complexity = O(N)
